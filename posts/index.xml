<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Serendipity in Software</title>
    <link>https://kirasys.github.io/posts/</link>
    <description>Recent content in Posts on Serendipity in Software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Jun 2020 10:51:47 +0530</lastBuildDate>
    
	<atom:link href="https://kirasys.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fuzzing vs Manual analysis.</title>
      <link>https://kirasys.github.io/posts/v3_bug_analysis/</link>
      <pubDate>Thu, 25 Jun 2020 10:51:47 +0530</pubDate>
      
      <guid>https://kirasys.github.io/posts/v3_bug_analysis/</guid>
      <description>I&amp;rsquo;ve found several vulnerabilities in V3 Lite of Ahnlab recently. Through these bugs, I will compare the pros and cons of fuzzing and manual analysis. Because these bugs are a real-world vulnerability, I won&amp;rsquo;t explain too many details. Case: Coverage-guided fuzzing The bug found by coverage-guided fuzzer(winafl) is triggered due to a URL parsing function called when v3 lite determines if it is a malicious URL. To fuzz this function, I wrote a short harness that loads a target dll and runs a function for URL parsing but it needs a little reverse engineering.</description>
    </item>
    
  </channel>
</rss>